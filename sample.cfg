daemonize = false

#logging {
#	general {
#		output = "file:/dev/stdout"
#		level  = error
#	}
#}

server {
	addr    = 0.0.0.0
	port    = 7070
	backlog = 1024
	threads = 1

	read-timeout    = { 2, 0 }
	write-timeout   = { 0, 0 }
	pending-timeout = { 10, 0 }
	max-pending     = 200
	high-watermark  = 5242880

	downstream ds_01 {
		addr           = 127.0.0.1
		port           = 8081
		connections    = 10
		high-watermark = 0
		read-timeout   = { 0, 0 }
		write-timeout  = { 0, 0 }
		retry          = { 1, 50000 }
	}

	downstream ds_02 {
		addr           = 127.0.0.1
		port           = 8082
		connections    = 10
		retry          = { 1, 50000 }
	}

	downstream ds_03 {
		addr           = 127.0.0.1 
		port           = 8083
		connections    = 10
		retry          = { 1, 50000 }
	}

	downstream ds_04 {
		addr        = 127.0.0.1
		port        = 80
		connections = 10
		retry       = { 1, 50000 }
	}

	downstream passthru_test {
		addr        = 127.0.0.1
		port        = 9095
		connections = 2
		retry       = { 1, 50000 }
	}

	downstream default_downstream {
		enabled = true
		addr    = 127.0.0.1 
		port    = 8084
	}

	ssl {
		enabled = false 
		cert    = ./server.crt
		key     = ./server.key
	}

	logging {
		error {
			enabled = true
			level   = error
			output  = "file:/dev/stdout"
		}
	}

	vhost "localhost*" {
		aliases = { "172.21.*", 127.0.0.1, box.local }
		strip-headers = { "foobar" }

		ssl {
			enabled           = true
			protocols-on      = { TLSv1, SSLv3 }
			protocols-off     = { SSLv3 }
			cert              = ./server.crt
			key               = ./server.key
			verify-peer       = true
			verify-depth      = 4
			cache-enabled     = false
		}

		rule test_passthrough {
			uri-match   = "/ownme"
			passthrough = true
			downstreams = { passthru_test }
		}

		rule test_redirect {
			uri-match      = "/redir"
			allow-redirect = true
			downstreams    = { ds_01 }
		}

		rule test_redirect_filter {
			uri-match       = "/redir_filter"
			allow-redirect  = true
			redirect-filter = { "localhost*", "*ieatfood.net*", "blerp*" }
			downstreams     = { ds_01 }
		}

		rule derp {
			uri-gmatch = "*/file*"
			downstreams = { ds_04 } 
		}

		rule test_1 {
			uri-match              = "/ugh"
			downstreams            = { ds_04 }

			# set rule-specific connection read/write timeout to infinity
			upstream-read-timeout  = { 1, 0 }
			upstream-write-timeout = { 0, 0 }
		}

		rule test_2 {
			uri-match             = "/poll"
			downstreams           = { ds_01, ds_02 }
			lb-method             = roundrobin
			upstream-read-timeout = { 10, 0 }

			headers {
				x-forwarded-for   = true
				x-ssl-certificate = false
			}
		}

		rule test_rmatch {
			uri-rmatch  = "^/things/(.*)"
			downstreams = { ds_03 }
		}

		rule test_gmatch {
			uri-gmatch  = "/stuff/*"
			downstreams = { ds_01, ds_02, ds_03 }
			lb-method   = roundrobin
		}

		rule default {
			uri-gmatch = "*"
			downstreams = { ds_01 }
		}

		logging {
			request {
				enabled = true
				output = "file:/dev/stdout"
				format = "{TS}: {RULE} {SRC} {HOST} {URI}"
			}

			error {
				enabled = true
				level   = error
				output  = "file:/dev/stderr"
				format  = "{SRC} {HOST} {URI}"
			}
		}
	}

	vhost test.blah {
		aliases = { test.blah.local }

		ssl {
			enabled           = true
			cert              = ./server2.pem
			cache-enabled     = false
		}

		rule default {
			uri-gmatch  = "/*"
			downstreams = { ds_01 }
		}

	logging {
		error {
			enabled = true
			output  = "file:/dev/stdout"
			format  = "{SRC} {HOST} {URI}"
		}
	}
}
